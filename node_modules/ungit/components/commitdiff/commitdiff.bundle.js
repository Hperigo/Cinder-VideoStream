(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ko = require('knockout');
var CommitLineDiff = require('./commitlinediff.js').CommitLineDiff;
var components = require('ungit-components');

components.register('commitDiff', function(args) {
  return new CommitDiff(args);
});

var CommitDiff = function(args) {
  this.totalLineDiffs = ko.observable();
  this.commitLineDiffs = ko.observableArray();
  this.showLoadMore = ko.observable();
  this.server = args.server;
  this.sha1 = args.sha1;
  this.repoPath = args.repoPath;
  this.textDiffType = args.textDiffType;
  this.maxNumberOfFilesShown = 50;

  var totalLineDiffs = args.fileLineDiffs.shift();
  if (!totalLineDiffs) {
    this.totalLineDiffs([0, 0, 'total']);
  } else {
    this.totalLineDiffs(totalLineDiffs);
  }

  this.checkShowLoadMore(args.fileLineDiffs.length);
  this.loadFileLineDiffs(args);
};

CommitDiff.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('commitdiff', this, {}, parentElement);
};

CommitDiff.prototype.checkShowLoadMore = function(size) {
  if (size < this.maxNumberOfFilesShown) {
    this.showLoadMore(false);
  } else {
    this.showLoadMore(true);
  }
};

CommitDiff.prototype.loadFileLineDiffs = function(args) {
  var tempCommitLineDiffs = [];
  var lineDiffLength = this.commitLineDiffs().length;

  args.fileLineDiffs.slice(lineDiffLength === 0 ? 0 : lineDiffLength + 1, this.maxNumberOfFilesShown).forEach(function(fileLineDiff) {
    args.fileLineDiff = fileLineDiff;
    tempCommitLineDiffs.push(new CommitLineDiff(args));
  });

  this.commitLineDiffs(this.commitLineDiffs().concat(tempCommitLineDiffs));
}

CommitDiff.prototype.loadMore = function(data, event) {
  this.maxNumberOfFilesShown += 50;
  var self = this;

  this.server.get('/show', { path: this.repoPath, sha1: this.sha1 }, function(err, logEntries) {
    if (err || !logEntries || !logEntries[0]) {
      return;
    }
    self.checkShowLoadMore(logEntries[0].fileLineDiffs.length);
    self.loadFileLineDiffs({
      repoPath: self.repoPath,
      server: self.server,
      sha1: self.sha1,
      textDiffType: self.textDiffType,
      fileLineDiffs: logEntries[0].fileLineDiffs
    });
  });
  event.stopImmediatePropagation();
}

},{"./commitlinediff.js":2,"knockout":"knockout","ungit-components":"ungit-components"}],2:[function(require,module,exports){
var ko = require('knockout');
var components = require('ungit-components');
var inherits = require('util').inherits;
var fileType = require('../../source/utils/file-type.js');

var CommitLineDiff = function(args) {
  var self = this;
  this.added = ko.observable(args.fileLineDiff[0]);
  this.removed = ko.observable(args.fileLineDiff[1]);
  this.fileName = ko.observable(args.fileLineDiff[2]);
  this.isShowingDiffs = ko.observable(false);
  this.repoPath = args.repoPath;
  this.server = args.server;
  this.sha1 = args.sha1;
  this.textDiffType = args.textDiffType;
  this.specificDiff = ko.observable(this.getSpecificDiff());
};
exports.CommitLineDiff = CommitLineDiff;

CommitLineDiff.prototype.getSpecificDiff = function() {
  return components.create(!this.fileName() || fileType(this.fileName()) == 'text' ? 'textdiff' : 'imagediff', {
    filename: this.fileName(),
    repoPath: this.repoPath,
    server: this.server,
    sha1: this.sha1,
    textDiffType: this.textDiffType,
    isShowingDiffs: this.isShowingDiffs
  });
}

CommitLineDiff.prototype.fileNameClick = function() {
  if (this.isShowingDiffs()) {
    this.isShowingDiffs(false);
  } else {
    this.isShowingDiffs(true);
    this.specificDiff().invalidateDiff();
  }
};

},{"../../source/utils/file-type.js":3,"knockout":"knockout","ungit-components":"ungit-components","util":undefined}],3:[function(require,module,exports){
var path = require('path');
var imageFileExtensions = ['.PNG', '.JPG', '.BMP', '.GIF', '.JPEG'];

module.exports = function(fileName) {
  return imageFileExtensions.indexOf(path.extname(fileName).toUpperCase()) > -1 ? 'image' : 'text';
}

},{"path":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2NvbW1pdGRpZmYvY29tbWl0ZGlmZi5qcyIsImNvbXBvbmVudHMvY29tbWl0ZGlmZi9jb21taXRsaW5lZGlmZi5qcyIsInNvdXJjZS91dGlscy9maWxlLXR5cGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIENvbW1pdExpbmVEaWZmID0gcmVxdWlyZSgnLi9jb21taXRsaW5lZGlmZi5qcycpLkNvbW1pdExpbmVEaWZmO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ2NvbW1pdERpZmYnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgQ29tbWl0RGlmZihhcmdzKTtcbn0pO1xuXG52YXIgQ29tbWl0RGlmZiA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgdGhpcy50b3RhbExpbmVEaWZmcyA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5jb21taXRMaW5lRGlmZnMgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcbiAgdGhpcy5zaG93TG9hZE1vcmUgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuc2VydmVyID0gYXJncy5zZXJ2ZXI7XG4gIHRoaXMuc2hhMSA9IGFyZ3Muc2hhMTtcbiAgdGhpcy5yZXBvUGF0aCA9IGFyZ3MucmVwb1BhdGg7XG4gIHRoaXMudGV4dERpZmZUeXBlID0gYXJncy50ZXh0RGlmZlR5cGU7XG4gIHRoaXMubWF4TnVtYmVyT2ZGaWxlc1Nob3duID0gNTA7XG5cbiAgdmFyIHRvdGFsTGluZURpZmZzID0gYXJncy5maWxlTGluZURpZmZzLnNoaWZ0KCk7XG4gIGlmICghdG90YWxMaW5lRGlmZnMpIHtcbiAgICB0aGlzLnRvdGFsTGluZURpZmZzKFswLCAwLCAndG90YWwnXSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy50b3RhbExpbmVEaWZmcyh0b3RhbExpbmVEaWZmcyk7XG4gIH1cblxuICB0aGlzLmNoZWNrU2hvd0xvYWRNb3JlKGFyZ3MuZmlsZUxpbmVEaWZmcy5sZW5ndGgpO1xuICB0aGlzLmxvYWRGaWxlTGluZURpZmZzKGFyZ3MpO1xufTtcblxuQ29tbWl0RGlmZi5wcm90b3R5cGUudXBkYXRlTm9kZSA9IGZ1bmN0aW9uKHBhcmVudEVsZW1lbnQpIHtcbiAga28ucmVuZGVyVGVtcGxhdGUoJ2NvbW1pdGRpZmYnLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG59O1xuXG5Db21taXREaWZmLnByb3RvdHlwZS5jaGVja1Nob3dMb2FkTW9yZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgaWYgKHNpemUgPCB0aGlzLm1heE51bWJlck9mRmlsZXNTaG93bikge1xuICAgIHRoaXMuc2hvd0xvYWRNb3JlKGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNob3dMb2FkTW9yZSh0cnVlKTtcbiAgfVxufTtcblxuQ29tbWl0RGlmZi5wcm90b3R5cGUubG9hZEZpbGVMaW5lRGlmZnMgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHZhciB0ZW1wQ29tbWl0TGluZURpZmZzID0gW107XG4gIHZhciBsaW5lRGlmZkxlbmd0aCA9IHRoaXMuY29tbWl0TGluZURpZmZzKCkubGVuZ3RoO1xuXG4gIGFyZ3MuZmlsZUxpbmVEaWZmcy5zbGljZShsaW5lRGlmZkxlbmd0aCA9PT0gMCA/IDAgOiBsaW5lRGlmZkxlbmd0aCArIDEsIHRoaXMubWF4TnVtYmVyT2ZGaWxlc1Nob3duKS5mb3JFYWNoKGZ1bmN0aW9uKGZpbGVMaW5lRGlmZikge1xuICAgIGFyZ3MuZmlsZUxpbmVEaWZmID0gZmlsZUxpbmVEaWZmO1xuICAgIHRlbXBDb21taXRMaW5lRGlmZnMucHVzaChuZXcgQ29tbWl0TGluZURpZmYoYXJncykpO1xuICB9KTtcblxuICB0aGlzLmNvbW1pdExpbmVEaWZmcyh0aGlzLmNvbW1pdExpbmVEaWZmcygpLmNvbmNhdCh0ZW1wQ29tbWl0TGluZURpZmZzKSk7XG59XG5cbkNvbW1pdERpZmYucHJvdG90eXBlLmxvYWRNb3JlID0gZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHtcbiAgdGhpcy5tYXhOdW1iZXJPZkZpbGVzU2hvd24gKz0gNTA7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnNlcnZlci5nZXQoJy9zaG93JywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoLCBzaGExOiB0aGlzLnNoYTEgfSwgZnVuY3Rpb24oZXJyLCBsb2dFbnRyaWVzKSB7XG4gICAgaWYgKGVyciB8fCAhbG9nRW50cmllcyB8fCAhbG9nRW50cmllc1swXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWxmLmNoZWNrU2hvd0xvYWRNb3JlKGxvZ0VudHJpZXNbMF0uZmlsZUxpbmVEaWZmcy5sZW5ndGgpO1xuICAgIHNlbGYubG9hZEZpbGVMaW5lRGlmZnMoe1xuICAgICAgcmVwb1BhdGg6IHNlbGYucmVwb1BhdGgsXG4gICAgICBzZXJ2ZXI6IHNlbGYuc2VydmVyLFxuICAgICAgc2hhMTogc2VsZi5zaGExLFxuICAgICAgdGV4dERpZmZUeXBlOiBzZWxmLnRleHREaWZmVHlwZSxcbiAgICAgIGZpbGVMaW5lRGlmZnM6IGxvZ0VudHJpZXNbMF0uZmlsZUxpbmVEaWZmc1xuICAgIH0pO1xuICB9KTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJ2YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG52YXIgZmlsZVR5cGUgPSByZXF1aXJlKCcuLi8uLi9zb3VyY2UvdXRpbHMvZmlsZS10eXBlLmpzJyk7XG5cbnZhciBDb21taXRMaW5lRGlmZiA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmFkZGVkID0ga28ub2JzZXJ2YWJsZShhcmdzLmZpbGVMaW5lRGlmZlswXSk7XG4gIHRoaXMucmVtb3ZlZCA9IGtvLm9ic2VydmFibGUoYXJncy5maWxlTGluZURpZmZbMV0pO1xuICB0aGlzLmZpbGVOYW1lID0ga28ub2JzZXJ2YWJsZShhcmdzLmZpbGVMaW5lRGlmZlsyXSk7XG4gIHRoaXMuaXNTaG93aW5nRGlmZnMgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgdGhpcy5yZXBvUGF0aCA9IGFyZ3MucmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gYXJncy5zZXJ2ZXI7XG4gIHRoaXMuc2hhMSA9IGFyZ3Muc2hhMTtcbiAgdGhpcy50ZXh0RGlmZlR5cGUgPSBhcmdzLnRleHREaWZmVHlwZTtcbiAgdGhpcy5zcGVjaWZpY0RpZmYgPSBrby5vYnNlcnZhYmxlKHRoaXMuZ2V0U3BlY2lmaWNEaWZmKCkpO1xufTtcbmV4cG9ydHMuQ29tbWl0TGluZURpZmYgPSBDb21taXRMaW5lRGlmZjtcblxuQ29tbWl0TGluZURpZmYucHJvdG90eXBlLmdldFNwZWNpZmljRGlmZiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29tcG9uZW50cy5jcmVhdGUoIXRoaXMuZmlsZU5hbWUoKSB8fCBmaWxlVHlwZSh0aGlzLmZpbGVOYW1lKCkpID09ICd0ZXh0JyA/ICd0ZXh0ZGlmZicgOiAnaW1hZ2VkaWZmJywge1xuICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVOYW1lKCksXG4gICAgcmVwb1BhdGg6IHRoaXMucmVwb1BhdGgsXG4gICAgc2VydmVyOiB0aGlzLnNlcnZlcixcbiAgICBzaGExOiB0aGlzLnNoYTEsXG4gICAgdGV4dERpZmZUeXBlOiB0aGlzLnRleHREaWZmVHlwZSxcbiAgICBpc1Nob3dpbmdEaWZmczogdGhpcy5pc1Nob3dpbmdEaWZmc1xuICB9KTtcbn1cblxuQ29tbWl0TGluZURpZmYucHJvdG90eXBlLmZpbGVOYW1lQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXNTaG93aW5nRGlmZnMoKSkge1xuICAgIHRoaXMuaXNTaG93aW5nRGlmZnMoZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNTaG93aW5nRGlmZnModHJ1ZSk7XG4gICAgdGhpcy5zcGVjaWZpY0RpZmYoKS5pbnZhbGlkYXRlRGlmZigpO1xuICB9XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgaW1hZ2VGaWxlRXh0ZW5zaW9ucyA9IFsnLlBORycsICcuSlBHJywgJy5CTVAnLCAnLkdJRicsICcuSlBFRyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XG4gIHJldHVybiBpbWFnZUZpbGVFeHRlbnNpb25zLmluZGV4T2YocGF0aC5leHRuYW1lKGZpbGVOYW1lKS50b1VwcGVyQ2FzZSgpKSA+IC0xID8gJ2ltYWdlJyA6ICd0ZXh0Jztcbn1cbiJdfQ==
