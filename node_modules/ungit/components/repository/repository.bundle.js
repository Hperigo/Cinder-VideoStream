(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var async = require('async');
var _ = require('lodash');

components.register('repository', function(args) {
  return new RepositoryViewModel(args.server, args.repoPath);
});

var RepositoryViewModel = function(server, repoPath) {
  var self = this;

  this.server = server;
  this.repoPath = repoPath;
  this.gitErrors = components.create('gitErrors', { server: server, repoPath: repoPath });
  this.graph = components.create('graph', { server: server, repoPath: repoPath });
  this.remotes = components.create('remotes', { server: server, repoPath: repoPath });
  this.submodules = components.create('submodules', { server: server, repoPath: repoPath });
  this.stash = components.create('stash', { server: server, repoPath: repoPath });
  this.staging = components.create('staging', { server: server, repoPath: repoPath });
  this.showLog = ko.computed(function() {
    return !self.staging.inRebase() && !self.staging.inMerge();
  });
  this.server.watchRepository(repoPath);
  this.isSubmodule = ko.observable(false);
  this.parentModulePath = ko.observable();
  this.parentModuleLink = ko.observable();
  this.refreshSubmoduleStatus();
  if (window.location.search.indexOf('noheader=true') >= 0) {
    this.refreshButton = components.create('refreshbutton');
  } else {
    this.refreshButton = false;
  }
}
RepositoryViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('repository', this, {}, parentElement);
}
RepositoryViewModel.prototype.onProgramEvent = function(event) {
  if (this.gitErrors.onProgramEvent) this.gitErrors.onProgramEvent(event);
  if (this.graph.onProgramEvent) this.graph.onProgramEvent(event);
  if (this.staging.onProgramEvent) this.staging.onProgramEvent(event);
  if (this.stash.onProgramEvent) this.stash.onProgramEvent(event);
  if (this.remotes.onProgramEvent) this.remotes.onProgramEvent(event);
  if (this.submodules.onProgramEvent) this.submodules.onProgramEvent(event);

  // If we get a reconnect event it's usually because the server crashed and then restarted
  // or something like that, so we need to tell it to start watching the path again
  if (event.event == 'connected') {
    this.server.watchRepository(this.repoPath);
  } else if (event.event == 'request-app-content-refresh') {

  }
}
RepositoryViewModel.prototype.updateAnimationFrame = function(deltaT) {
  if (this.graph.updateAnimationFrame) this.graph.updateAnimationFrame(deltaT);
}
RepositoryViewModel.prototype.refreshSubmoduleStatus = function() {
  var self = this;
  this.server.get('/baserepopath', { path: this.repoPath }, function(err, baseRepoPath) {
    if (err) {
      self.isSubmodule(false);
      return true;
    }

    self.server.get('/submodules', { path: baseRepoPath.path }, function(err, submodules) {
      if (!err && Array.isArray(submodules)) {
        var baseName = self.repoPath.replace(/^.*[\\\/]/, '');

        for (var n = 0; n < submodules.length; n++) {
          if (submodules[n].path === baseName) {
            self.isSubmodule(true);
            self.parentModulePath(baseRepoPath.path);
            self.parentModuleLink('/#/repository?path=' + encodeURIComponent(baseRepoPath.path));
            return;
          }
        }
      }

      self.isSubmodule(false);
      return true;
    });
  });
}

},{"async":"async","knockout":"knockout","lodash":"lodash","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3JlcG9zaXRvcnkvcmVwb3NpdG9yeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ3JlcG9zaXRvcnknLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgUmVwb3NpdG9yeVZpZXdNb2RlbChhcmdzLnNlcnZlciwgYXJncy5yZXBvUGF0aCk7XG59KTtcblxudmFyIFJlcG9zaXRvcnlWaWV3TW9kZWwgPSBmdW5jdGlvbihzZXJ2ZXIsIHJlcG9QYXRoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgdGhpcy5yZXBvUGF0aCA9IHJlcG9QYXRoO1xuICB0aGlzLmdpdEVycm9ycyA9IGNvbXBvbmVudHMuY3JlYXRlKCdnaXRFcnJvcnMnLCB7IHNlcnZlcjogc2VydmVyLCByZXBvUGF0aDogcmVwb1BhdGggfSk7XG4gIHRoaXMuZ3JhcGggPSBjb21wb25lbnRzLmNyZWF0ZSgnZ3JhcGgnLCB7IHNlcnZlcjogc2VydmVyLCByZXBvUGF0aDogcmVwb1BhdGggfSk7XG4gIHRoaXMucmVtb3RlcyA9IGNvbXBvbmVudHMuY3JlYXRlKCdyZW1vdGVzJywgeyBzZXJ2ZXI6IHNlcnZlciwgcmVwb1BhdGg6IHJlcG9QYXRoIH0pO1xuICB0aGlzLnN1Ym1vZHVsZXMgPSBjb21wb25lbnRzLmNyZWF0ZSgnc3VibW9kdWxlcycsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiByZXBvUGF0aCB9KTtcbiAgdGhpcy5zdGFzaCA9IGNvbXBvbmVudHMuY3JlYXRlKCdzdGFzaCcsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiByZXBvUGF0aCB9KTtcbiAgdGhpcy5zdGFnaW5nID0gY29tcG9uZW50cy5jcmVhdGUoJ3N0YWdpbmcnLCB7IHNlcnZlcjogc2VydmVyLCByZXBvUGF0aDogcmVwb1BhdGggfSk7XG4gIHRoaXMuc2hvd0xvZyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhc2VsZi5zdGFnaW5nLmluUmViYXNlKCkgJiYgIXNlbGYuc3RhZ2luZy5pbk1lcmdlKCk7XG4gIH0pO1xuICB0aGlzLnNlcnZlci53YXRjaFJlcG9zaXRvcnkocmVwb1BhdGgpO1xuICB0aGlzLmlzU3VibW9kdWxlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gIHRoaXMucGFyZW50TW9kdWxlUGF0aCA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5wYXJlbnRNb2R1bGVMaW5rID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLnJlZnJlc2hTdWJtb2R1bGVTdGF0dXMoKTtcbiAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZignbm9oZWFkZXI9dHJ1ZScpID49IDApIHtcbiAgICB0aGlzLnJlZnJlc2hCdXR0b24gPSBjb21wb25lbnRzLmNyZWF0ZSgncmVmcmVzaGJ1dHRvbicpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVmcmVzaEJ1dHRvbiA9IGZhbHNlO1xuICB9XG59XG5SZXBvc2l0b3J5Vmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgncmVwb3NpdG9yeScsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cblJlcG9zaXRvcnlWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKHRoaXMuZ2l0RXJyb3JzLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLmdpdEVycm9ycy5vblByb2dyYW1FdmVudChldmVudCk7XG4gIGlmICh0aGlzLmdyYXBoLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLmdyYXBoLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMuc3RhZ2luZy5vblByb2dyYW1FdmVudCkgdGhpcy5zdGFnaW5nLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMuc3Rhc2gub25Qcm9ncmFtRXZlbnQpIHRoaXMuc3Rhc2gub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICBpZiAodGhpcy5yZW1vdGVzLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLnJlbW90ZXMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICBpZiAodGhpcy5zdWJtb2R1bGVzLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLnN1Ym1vZHVsZXMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuXG4gIC8vIElmIHdlIGdldCBhIHJlY29ubmVjdCBldmVudCBpdCdzIHVzdWFsbHkgYmVjYXVzZSB0aGUgc2VydmVyIGNyYXNoZWQgYW5kIHRoZW4gcmVzdGFydGVkXG4gIC8vIG9yIHNvbWV0aGluZyBsaWtlIHRoYXQsIHNvIHdlIG5lZWQgdG8gdGVsbCBpdCB0byBzdGFydCB3YXRjaGluZyB0aGUgcGF0aCBhZ2FpblxuICBpZiAoZXZlbnQuZXZlbnQgPT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICB0aGlzLnNlcnZlci53YXRjaFJlcG9zaXRvcnkodGhpcy5yZXBvUGF0aCk7XG4gIH0gZWxzZSBpZiAoZXZlbnQuZXZlbnQgPT0gJ3JlcXVlc3QtYXBwLWNvbnRlbnQtcmVmcmVzaCcpIHtcblxuICB9XG59XG5SZXBvc2l0b3J5Vmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGRlbHRhVCkge1xuICBpZiAodGhpcy5ncmFwaC51cGRhdGVBbmltYXRpb25GcmFtZSkgdGhpcy5ncmFwaC51cGRhdGVBbmltYXRpb25GcmFtZShkZWx0YVQpO1xufVxuUmVwb3NpdG9yeVZpZXdNb2RlbC5wcm90b3R5cGUucmVmcmVzaFN1Ym1vZHVsZVN0YXR1cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VydmVyLmdldCgnL2Jhc2VyZXBvcGF0aCcsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCB9LCBmdW5jdGlvbihlcnIsIGJhc2VSZXBvUGF0aCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHNlbGYuaXNTdWJtb2R1bGUoZmFsc2UpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2VsZi5zZXJ2ZXIuZ2V0KCcvc3VibW9kdWxlcycsIHsgcGF0aDogYmFzZVJlcG9QYXRoLnBhdGggfSwgZnVuY3Rpb24oZXJyLCBzdWJtb2R1bGVzKSB7XG4gICAgICBpZiAoIWVyciAmJiBBcnJheS5pc0FycmF5KHN1Ym1vZHVsZXMpKSB7XG4gICAgICAgIHZhciBiYXNlTmFtZSA9IHNlbGYucmVwb1BhdGgucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgJycpO1xuXG4gICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgc3VibW9kdWxlcy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgIGlmIChzdWJtb2R1bGVzW25dLnBhdGggPT09IGJhc2VOYW1lKSB7XG4gICAgICAgICAgICBzZWxmLmlzU3VibW9kdWxlKHRydWUpO1xuICAgICAgICAgICAgc2VsZi5wYXJlbnRNb2R1bGVQYXRoKGJhc2VSZXBvUGF0aC5wYXRoKTtcbiAgICAgICAgICAgIHNlbGYucGFyZW50TW9kdWxlTGluaygnLyMvcmVwb3NpdG9yeT9wYXRoPScgKyBlbmNvZGVVUklDb21wb25lbnQoYmFzZVJlcG9QYXRoLnBhdGgpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5pc1N1Ym1vZHVsZShmYWxzZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=
