(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var diff2html = require('diff2html').Diff2Html;

components.register('textdiff', function(args) {
  return new TextDiffViewModel(args);
});

var loadLimit = 100;

var TextDiffViewModel = function(args) {
  var self = this;
  this.filename = args.filename;
  this.repoPath = args.repoPath;
  this.server = args.server;
  this.sha1 = args.sha1;
  this.loadMoreCount = ko.observable(0);
  this.diffJson = null;
  this.diffHtml = ko.observable();
  this.loadCount = loadLimit;
  this.textDiffType = args.textDiffType;
  this.isShowingDiffs = args.isShowingDiffs;
  this.diffProgressBar = args.diffProgressBar;

  this.textDiffType.subscribe(function() {
    self.invalidateDiff();
  });
}
TextDiffViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('textdiff', this, {}, parentElement);
}
TextDiffViewModel.prototype.getDiffArguments = function() {
  return {
    file: this.filename,
    path: this.repoPath,
    sha1: this.sha1 ? this.sha1 : ''
  };
}

TextDiffViewModel.prototype.invalidateDiff = function(callback) {
  var self = this;

  if (this.isShowingDiffs()) {
    if (this.diffProgressBar) this.diffProgressBar.start();

    self.server.get('/diff', this.getDiffArguments() , function(err, diffs) {
      if (err) {
        if (self.diffProgressBar) self.diffProgressBar.stop();
        if (err.errorCode == 'no-such-file') {
          // The file existed before but has been removed, but we're trying to get a diff for it
          // Most likely it will just disappear with the next refresh of the staging area
          // so we just ignore the error here
          return true;
        }
        return callback ? callback(err) : null;
      }

      if (typeof diffs == 'string') {
        self.diffJson = diff2html.getJsonFromDiff(diffs);
        self.render();
      }

      if (self.diffProgressBar) self.diffProgressBar.stop();
      if (callback) callback();
    });
  } else {
    if (callback) callback();
  }
}

TextDiffViewModel.prototype.render = function() {
  if (this.diffJson.length == 0) return; // check if diffs are available (binary files do not support them)

  var self = this;
  var diffJsonCopy = JSON.parse(JSON.stringify(this.diffJson)); // make a json copy
  var lineCount = 0;

  diffJsonCopy[0].blocks = diffJsonCopy[0].blocks.reduce(function(blocks, block) {
    var length = block.lines.length;
    if (lineCount < self.loadCount) {
      block.lines = block.lines.slice(0, self.loadCount - lineCount);
      blocks.push(block);
    }
    lineCount += length;
    return blocks;
  }, []);

  this.loadMoreCount(Math.min(loadLimit, Math.max(0, lineCount - this.loadCount)));

  if (this.textDiffType() === 'sidebysidediff') {
    this.diffHtml(diff2html.getPrettySideBySideHtmlFromJson(diffJsonCopy));
  } else {
    this.diffHtml(diff2html.getPrettyHtmlFromJson(diffJsonCopy));
  }
};

TextDiffViewModel.prototype.loadMore = function(callback) {
  this.loadCount += this.loadMoreCount();
  this.render();
}

},{"diff2html":undefined,"knockout":"knockout","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3RleHRkaWZmL3RleHRkaWZmLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIGRpZmYyaHRtbCA9IHJlcXVpcmUoJ2RpZmYyaHRtbCcpLkRpZmYySHRtbDtcblxuY29tcG9uZW50cy5yZWdpc3RlcigndGV4dGRpZmYnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgVGV4dERpZmZWaWV3TW9kZWwoYXJncyk7XG59KTtcblxudmFyIGxvYWRMaW1pdCA9IDEwMDtcblxudmFyIFRleHREaWZmVmlld01vZGVsID0gZnVuY3Rpb24oYXJncykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuZmlsZW5hbWUgPSBhcmdzLmZpbGVuYW1lO1xuICB0aGlzLnJlcG9QYXRoID0gYXJncy5yZXBvUGF0aDtcbiAgdGhpcy5zZXJ2ZXIgPSBhcmdzLnNlcnZlcjtcbiAgdGhpcy5zaGExID0gYXJncy5zaGExO1xuICB0aGlzLmxvYWRNb3JlQ291bnQgPSBrby5vYnNlcnZhYmxlKDApO1xuICB0aGlzLmRpZmZKc29uID0gbnVsbDtcbiAgdGhpcy5kaWZmSHRtbCA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5sb2FkQ291bnQgPSBsb2FkTGltaXQ7XG4gIHRoaXMudGV4dERpZmZUeXBlID0gYXJncy50ZXh0RGlmZlR5cGU7XG4gIHRoaXMuaXNTaG93aW5nRGlmZnMgPSBhcmdzLmlzU2hvd2luZ0RpZmZzO1xuICB0aGlzLmRpZmZQcm9ncmVzc0JhciA9IGFyZ3MuZGlmZlByb2dyZXNzQmFyO1xuXG4gIHRoaXMudGV4dERpZmZUeXBlLnN1YnNjcmliZShmdW5jdGlvbigpIHtcbiAgICBzZWxmLmludmFsaWRhdGVEaWZmKCk7XG4gIH0pO1xufVxuVGV4dERpZmZWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCd0ZXh0ZGlmZicsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cblRleHREaWZmVmlld01vZGVsLnByb3RvdHlwZS5nZXREaWZmQXJndW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgZmlsZTogdGhpcy5maWxlbmFtZSxcbiAgICBwYXRoOiB0aGlzLnJlcG9QYXRoLFxuICAgIHNoYTE6IHRoaXMuc2hhMSA/IHRoaXMuc2hhMSA6ICcnXG4gIH07XG59XG5cblRleHREaWZmVmlld01vZGVsLnByb3RvdHlwZS5pbnZhbGlkYXRlRGlmZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5pc1Nob3dpbmdEaWZmcygpKSB7XG4gICAgaWYgKHRoaXMuZGlmZlByb2dyZXNzQmFyKSB0aGlzLmRpZmZQcm9ncmVzc0Jhci5zdGFydCgpO1xuXG4gICAgc2VsZi5zZXJ2ZXIuZ2V0KCcvZGlmZicsIHRoaXMuZ2V0RGlmZkFyZ3VtZW50cygpICwgZnVuY3Rpb24oZXJyLCBkaWZmcykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAoc2VsZi5kaWZmUHJvZ3Jlc3NCYXIpIHNlbGYuZGlmZlByb2dyZXNzQmFyLnN0b3AoKTtcbiAgICAgICAgaWYgKGVyci5lcnJvckNvZGUgPT0gJ25vLXN1Y2gtZmlsZScpIHtcbiAgICAgICAgICAvLyBUaGUgZmlsZSBleGlzdGVkIGJlZm9yZSBidXQgaGFzIGJlZW4gcmVtb3ZlZCwgYnV0IHdlJ3JlIHRyeWluZyB0byBnZXQgYSBkaWZmIGZvciBpdFxuICAgICAgICAgIC8vIE1vc3QgbGlrZWx5IGl0IHdpbGwganVzdCBkaXNhcHBlYXIgd2l0aCB0aGUgbmV4dCByZWZyZXNoIG9mIHRoZSBzdGFnaW5nIGFyZWFcbiAgICAgICAgICAvLyBzbyB3ZSBqdXN0IGlnbm9yZSB0aGUgZXJyb3IgaGVyZVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjayA/IGNhbGxiYWNrKGVycikgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRpZmZzID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNlbGYuZGlmZkpzb24gPSBkaWZmMmh0bWwuZ2V0SnNvbkZyb21EaWZmKGRpZmZzKTtcbiAgICAgICAgc2VsZi5yZW5kZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuZGlmZlByb2dyZXNzQmFyKSBzZWxmLmRpZmZQcm9ncmVzc0Jhci5zdG9wKCk7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICB9XG59XG5cblRleHREaWZmVmlld01vZGVsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuZGlmZkpzb24ubGVuZ3RoID09IDApIHJldHVybjsgLy8gY2hlY2sgaWYgZGlmZnMgYXJlIGF2YWlsYWJsZSAoYmluYXJ5IGZpbGVzIGRvIG5vdCBzdXBwb3J0IHRoZW0pXG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZGlmZkpzb25Db3B5ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmRpZmZKc29uKSk7IC8vIG1ha2UgYSBqc29uIGNvcHlcbiAgdmFyIGxpbmVDb3VudCA9IDA7XG5cbiAgZGlmZkpzb25Db3B5WzBdLmJsb2NrcyA9IGRpZmZKc29uQ29weVswXS5ibG9ja3MucmVkdWNlKGZ1bmN0aW9uKGJsb2NrcywgYmxvY2spIHtcbiAgICB2YXIgbGVuZ3RoID0gYmxvY2subGluZXMubGVuZ3RoO1xuICAgIGlmIChsaW5lQ291bnQgPCBzZWxmLmxvYWRDb3VudCkge1xuICAgICAgYmxvY2subGluZXMgPSBibG9jay5saW5lcy5zbGljZSgwLCBzZWxmLmxvYWRDb3VudCAtIGxpbmVDb3VudCk7XG4gICAgICBibG9ja3MucHVzaChibG9jayk7XG4gICAgfVxuICAgIGxpbmVDb3VudCArPSBsZW5ndGg7XG4gICAgcmV0dXJuIGJsb2NrcztcbiAgfSwgW10pO1xuXG4gIHRoaXMubG9hZE1vcmVDb3VudChNYXRoLm1pbihsb2FkTGltaXQsIE1hdGgubWF4KDAsIGxpbmVDb3VudCAtIHRoaXMubG9hZENvdW50KSkpO1xuXG4gIGlmICh0aGlzLnRleHREaWZmVHlwZSgpID09PSAnc2lkZWJ5c2lkZWRpZmYnKSB7XG4gICAgdGhpcy5kaWZmSHRtbChkaWZmMmh0bWwuZ2V0UHJldHR5U2lkZUJ5U2lkZUh0bWxGcm9tSnNvbihkaWZmSnNvbkNvcHkpKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRpZmZIdG1sKGRpZmYyaHRtbC5nZXRQcmV0dHlIdG1sRnJvbUpzb24oZGlmZkpzb25Db3B5KSk7XG4gIH1cbn07XG5cblRleHREaWZmVmlld01vZGVsLnByb3RvdHlwZS5sb2FkTW9yZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMubG9hZENvdW50ICs9IHRoaXMubG9hZE1vcmVDb3VudCgpO1xuICB0aGlzLnJlbmRlcigpO1xufVxuIl19
